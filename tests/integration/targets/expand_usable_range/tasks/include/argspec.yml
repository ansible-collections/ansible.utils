---
- name: Check argspec validation with filter (missing arg)
  ansible.builtin.set_fact:
    _result1: "{{ '' | ansible.utils.expand_usable_range }}"
  ignore_errors: true
  register: result1

- assert:
    that: "{{ msg in result1.msg }}"
  vars:
    msg: "Address cannot be empty"

- name: Check argspec validation with filter (random string arg)
  ansible.builtin.set_fact:
    _result2: "{{ 'helloworld' | ansible.utils.expand_usable_range }}"
  ignore_errors: true
  register: result2

- assert:
    that: "{{ msg in result2.msg }}"
  vars:
    msg: "Expected 4 octets"

- name: Check argspec validation with filter (invalid arg for expansion)
  ansible.builtin.set_fact:
    _result3: "{{ '192.168.1.25/24' | ansible.utils.expand_usable_range }}"
  ignore_errors: true
  register: result3

- assert:
    that: "{{ msg in result3.msg }}"
  vars:
    msg: "has host bits set"

- name: Check argspec validation with filter (invalid format for arg)
  ansible.builtin.set_fact:
    _result4: "{{ '192.0.2.0/23/24' | ansible.utils.expand_usable_range }}"
  ignore_errors: true
  register: result4

- assert:
    that: "{{ msg in result4.msg }}"
  vars:
    msg: "Only one '/' permitted"

- name: Check argspec validation with filter (invalid netmask)
  ansible.builtin.set_fact:
    _result5: "{{ '10.0.0.0/322' | ansible.utils.expand_usable_range }}"
  ignore_errors: true
  register: result5

- assert:
    that: "{{ msg in result5.msg }}"
  vars:
    msg: "not a valid netmask"
