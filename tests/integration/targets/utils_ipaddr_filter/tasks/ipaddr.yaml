---
- name: set ipaddress list
  ansible.builtin.set_fact:
    value:
      - 192.24.2.1
      - host.fqdn
      - ::1
      - 192.168.32.0/24
      - fe80::100/10
      - "42540766412265424405338506004571095040/64"
      - True

- name: ipaddr filter with empty string query
  ansible.builtin.set_fact:
    result1: "{{ value|ansible.utils.ipaddr }}"

- name: Assert result for ipaddr.
  assert:
    that: "{{ result1 == ipaddr_result1 }}"

- name: ipaddr filter with host string query
  ansible.builtin.set_fact:
    result2: "{{ value|ansible.utils.ipaddr('host') }}"

- name: Assert result for ipaddr host query
  assert:
    that: "{{ result2 == ipaddr_result2 }}"

- name: ipaddr filter with public network query
  ansible.builtin.set_fact:
    result3: "{{ value|ansible.utils.ipaddr('public') }}"

- name: Assert result for ipaddr public network query
  assert:
    that: "{{ result3== ipaddr_result3 }}"

- name: ipaddr filter with network query
  ansible.builtin.set_fact:
    result4: "{{ value|ansible.utils.ipaddr('net') }}"

- name: Assert result for ipaddr network query
  assert:
    that: "{{ result4 == ipaddr_result4 }}"

- name: ipaddr filter with network/prefix query
  ansible.builtin.set_fact:
    result5: "{{ '192.168.0.0/23' | ansible.utils.ipaddr('network/prefix') }}"

- name: Assert result for ipaddr filter with network/prefix query
  assert:
    that: "{{ result5 == '192.168.0.0/23' }}"

- name: ipaddr filter with chained filters
  ansible.builtin.set_fact:
    result6: "{{ '192.168.255.0' | ansible.utils.ipaddr('network') | ansible.utils.ipmath(123) }}"

- name: Assert result for ipaddr filter with chained filters
  assert:
    that: "{{ result6 == '192.168.255.123' }}"

- debug:
    msg: "Test int input for ipaddr filter"

- name: set fact 1
  set_fact:
    ip1: "172.20.0.1"

- name: Set fact 2
  set_fact:
    ip2: "{{ ((ip1 | ansible.utils.ipaddr('int')) + 6) | ansible.utils.ipaddr }}"

- name: Assert result for ipaddr filter
  assert:
    that: "{{ ip2 == '172.20.0.7' }}"
